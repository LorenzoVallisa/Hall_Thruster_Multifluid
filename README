The FORMICA Solver
FORtran MInimal Conservation equAtions Solver

---------------------------------------------------------------------------------------------
---------------- Multi-fluid solver for plasma simulation -----------------------------------
---------------------------------------------------------------------------------------------

Solver for Euler set of equations for collisional ions and electrons in their full EM interaction.

Downlaod and compile but  NOTE THAT before that you need to install the LIS library (https://www.ssisc.org/lis/index.en.html) and compile it, the dynamic linking is already in the Makefile.


--------- HOW TO SET .inp files according to what zou want to simulate ------------------

|||||||||||||||||||||||||||||||||||||||| NUMERICAL SETTINGS |||||||||||||||||||||||||||||||||||||||||||||||||||||||

test_case_ion_vacuum.inp

Cells Number
Left boundary position
Right boundary position
Grid type (uniform, Chebyshev)
Simulation type  (Euler -> single fluid, Euler_multi_fluid -> multi fluid)
t_start
t_end
timesteps
Time scheme (MidpointEuler,ForwardEuler)
limiter (0,1)
write every
EM fields activation (esc -> self-consistent electric field along x, force -> impose fixed external electric field along x axis)
Initial condition (Test_case) (plasma_expansion ->  Plasma expansion into vacuum ,discontinous-> Sod Shock problem,  continous-> uniform continous initial condition)
Collision simulation (collision_full -> elastic and inelastic collisional terms through Boltzmann operator ,collisionA -> approximation of elastic terms with thermal velocity (NOT YET IMPLMENTED FOR MULTIFLUID), collision_elastic -> only elastic term derivation through Boltzmann operator NOT IMPLEMENTED FOR ADIMENSIONAL, no_coll-> no collisional terms)
Non-dimensional bool (Dim,Nondim)

Note: BC here are ONLY for fluid variables within time_integrators

|||||||||||||||||||||||||||||||||||||||| INITIAL CONDITION |||||||||||||||||||||||||||||||||||||||||||||||||||||||

initial_conditions.inp

rho_init_electrons
T_init_electrons
u_init_electrons
rho_init_ions
T_init_ions
u_init_ions


|||||||||||||||||||||||||||||||||||||||| BOUNDARY CONDITIONS |||||||||||||||||||||||||||||||||||||||||||||||||||||||

boundary_conditions.inp


BC_Left_electrons	    (open, periodic, Neumann) For periodic both must be set, otherwise it will throw runtime error
rho_left_electrons
T_left_electrons
u_left_electrons
BC_Right_electrons     (open, periodic, Neumann) For periodic both must be set, otherwise it will throw runtime error
rho_right_electrons
T_right_electrons
u_right_electrons
BC_Left_ions	    (open, periodic, Neumann) For periodic both must be set, otherwise it will throw runtime error
rho_left_ions
T_left_ions
u_left_ions
BC_Right_ions		 (open, periodic, Neumann) For periodic both must be set, otherwise it will throw runtime error
rho_right_ions
T_right_ions
u_right_ions

|||||||||||||||||||||||||||||||||||||||| PHYSICAL CONSTANTS |||||||||||||||||||||||||||||||||||||||||||||||||||||||


physical_constants.inp

gamma_electrons
mass_electrons
charge_electrons
k_boltzmann
eps_0
gamma_ions
mass_ions
charge_ions
neutrals_density
neutrals_velocity
threshold energy for Xenon ionization
threshold energy for Xenon excitation
Still ions background density (for single fluid only)


|||||||||||||||||||||||||||||||||||||||| REFERENCE VARIABLES |||||||||||||||||||||||||||||||||||||||||||||||||||||||

FOR NONDIMENSIONAL ANALYSIS

characteristics_quantities.inp

rho_ref_el
rho_ref_ions
x_ref
time_ref
nu_coll_ref
phi_ref
B_mag
E_y
uy_el
uy_ion
P_ref_el
P_ref_ion

|||||||||||||||||||||||||||||||||||||||| ELECTRIC FIELD |||||||||||||||||||||||||||||||||||||||||||||||||||||||

POISSON CONDITIONS

EM_fields.dat

Ex_in
Ey_in
B_in
phi_0
phi_end
BC Left (Poisson) (Dirichlet, Neumann , periodic)
BC_Right (Poisson) (Dirichlet, Neumann , periodic) Periodic has to be there for boths
Neu_left (Neumann non-homogeneous BC)
Neu_right (Neumann non-homogeneous BC)


# PDE systems
################################################

Euler system has 4 equations:
rho    --- density
rho ux --- x-momentum
rho uy --- y-momentum
rho E  --- total energy

# GRID
################################################

The solution U has dimension U(N_EQ, N_cells), and includes the two ghost cells (GC).
Numbering of cells and interfaces is as follows:

   
         cell1     int1   cell2    int2   cell3   int3          intN     cellN
    ----(GC_1)------|------(C)------|------(C)-----|--- (...) ---|------(GC_N)----
                  x_min                                        x_max
    
N_cells     = total number of cells
N_cells - 2 = number of physical cells
N_int = N_cells - 1 = number of interfaces

First and last interfaces coincide with the limits of the domain, x_min, x_max

# HOW to add a PDE - say "my_pde_123"
################################################

1) copy an existing PDE module such as pde_euler.f90 to pde_my_pde_123.f90.
2) write inside it the relevant functions (copy Euler)
3) Load it into the pde.f90 module, with: "USE PDE_MY_PDE"
4) Include it in the Makefile (the pde.f90 module will need it)
5) Introduce a global bool variable in the gobal.f90, such as my_pde_123_BOOL
6) In the initialization file, insert a line that activates this bool when the
   input file is read, AND set in the same place the number of equations...
7) In the pde.f90, put the system boolean in the IF THEN ELSE statements
8) I think you should be good to go.

# FAQ
################################################

Q: ** On entry to DGEBAL parameter number  3 had an illegal value
A: This comes from lapack and you are probably trying to compute the eigenvalues of the Jacobian.
   Probably the solution is weird or has crashed at a certain timestep, so the eigenvalues 
   computation also crashes, with this message.
   Try a smaller timestep.



